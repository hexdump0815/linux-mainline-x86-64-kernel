this otherwise breaks jackd by setting a strange size fixed buffer size
jackd (and other audio apps) would then only work if the audio buffer
size is a multiple of 48 which give very unusual strange numbers

diff --git a/sound/soc/intel/atom/sst-mfld-platform-pcm.c b/sound/soc/intel/atom/sst-mfld-platform-pcm.c
index 9e9b05883557..aeaef883807d 100644
--- a/sound/soc/intel/atom/sst-mfld-platform-pcm.c
+++ b/sound/soc/intel/atom/sst-mfld-platform-pcm.c
@@ -333,16 +333,16 @@ static int sst_media_open(struct snd_pcm_substream *substream,
 	if (ret_val < 0)
 		goto out_power_up;
 
-	/*
-	 * Make sure the period to be multiple of 1ms to align the
-	 * design of firmware. Apply same rule to buffer size to make
-	 * sure alsa could always find a value for period size
-	 * regardless the buffer size given by user space.
-	 */
-	snd_pcm_hw_constraint_step(substream->runtime, 0,
-			   SNDRV_PCM_HW_PARAM_PERIOD_SIZE, 48);
-	snd_pcm_hw_constraint_step(substream->runtime, 0,
-			   SNDRV_PCM_HW_PARAM_BUFFER_SIZE, 48);
+//	/*
+//	 * Make sure the period to be multiple of 1ms to align the
+//	 * design of firmware. Apply same rule to buffer size to make
+//	 * sure alsa could always find a value for period size
+//	 * regardless the buffer size given by user space.
+//	 */
+//	snd_pcm_hw_constraint_step(substream->runtime, 0,
+//			   SNDRV_PCM_HW_PARAM_PERIOD_SIZE, 48);
+//	snd_pcm_hw_constraint_step(substream->runtime, 0,
+//			   SNDRV_PCM_HW_PARAM_BUFFER_SIZE, 48);
 
 	/* Make sure, that the period size is always even */
 	snd_pcm_hw_constraint_step(substream->runtime, 0,
